name: nMapping+ CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: 3.9

jobs:
  lint-and-test:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pylint black isort
        if [ -f dashboard/requirements.txt ]; then
          pip install -r dashboard/requirements.txt
        fi
        
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 dashboard/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 dashboard/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        
    - name: Format check with black
      run: |
        black --check --diff dashboard/
        
    - name: Import sorting check with isort
      run: |
        isort --check-only --diff dashboard/
        
    - name: Lint with pylint
      run: |
        pylint dashboard/ --exit-zero --score=yes
        
    - name: Run tests
      run: |
        if [ -d "tests/" ]; then
          pytest tests/ -v --tb=short
        else
          echo "No tests directory found, skipping tests"
        fi

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        if [ -f dashboard/requirements.txt ]; then
          pip install -r dashboard/requirements.txt
        fi
        
    - name: Run bandit security scanner
      run: |
        bandit -r dashboard/ -f json -o bandit-report.json || true
        bandit -r dashboard/ --severity-level medium
        
    - name: Check for known vulnerabilities with safety
      run: |
        safety check --json --output safety-report.json || true
        safety check
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  documentation:
    name: Documentation Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate Markdown
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-verbose-mode: 'yes'
        config-file: '.github/markdown-link-check-config.json'
        
    - name: Check documentation structure
      run: |
        # Verify required documentation files exist
        required_files=(
          "README.md"
          "docs/index.md"
          "docs/deployment-guide.md"
          "docs/quick-start.md"
          "CHANGELOG.md"
          "LICENSE"
        )
        
        missing_files=()
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            missing_files+=("$file")
          fi
        done
        
        if [ ${#missing_files[@]} -ne 0 ]; then
          echo "Missing required documentation files:"
          printf '%s\n' "${missing_files[@]}"
          exit 1
        fi
        
        echo "All required documentation files present"

  script-validation:
    name: Script Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install ShellCheck dependencies
      run: |
        bash scripts/install_shellcheck.sh
        
    - name: Lint shell scripts
      run: |
        bash scripts/lint_shell.sh

  container-validation:
    name: Container Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker
      uses: docker/setup-buildx-action@v3
      
    - name: Test Flask application startup
      run: |
        cd dashboard/
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
        
        # Test import and basic functionality
        python -c "
        import sys
        sys.path.append('.')
        try:
            from dashboard_app import app
            print('‚úÖ Flask application imports successfully')
        except ImportError as e:
            print(f'‚ùå Import error: {e}')
            sys.exit(1)
        except Exception as e:
            print(f'‚ùå Application error: {e}')
            sys.exit(1)
        "

  release-validation:
    name: Release Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate release version
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "Release version: $VERSION"
        
        # Check if version exists in CHANGELOG.md
        if ! grep -q "## \[$VERSION\]" CHANGELOG.md; then
          echo "‚ùå Version $VERSION not found in CHANGELOG.md"
          exit 1
        fi
        
        echo "‚úÖ Version $VERSION found in CHANGELOG.md"
        
    - name: Create release package
      run: |
        # Create a clean distribution package
        VERSION=${GITHUB_REF#refs/tags/v}
        
        # Create tarball excluding development files
        tar -czf "nmapping-plus-$VERSION.tar.gz" \
          --exclude='.git*' \
          --exclude='__pycache__' \
          --exclude='*.pyc' \
          --exclude='.pytest_cache' \
          --exclude='node_modules' \
          --exclude='*.log' \
          --exclude='test_*' \
          .
          
        echo "üì¶ Created nmapping-plus-$VERSION.tar.gz"
        
    - name: Upload release artifact
      uses: actions/upload-artifact@v3
      with:
        name: release-package
        path: nmapping-plus-*.tar.gz

  notification:
    name: Notification
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan, documentation, script-validation, container-validation]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.lint-and-test.result == 'success' && needs.security-scan.result == 'success'
      run: |
        echo "‚úÖ All checks passed successfully!"
        
    - name: Notify on failure
      if: needs.lint-and-test.result == 'failure' || needs.security-scan.result == 'failure'
      run: |
        echo "‚ùå Some checks failed. Please review the logs."
        exit 1